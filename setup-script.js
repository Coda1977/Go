#!/usr/bin/env node

// Automated setup script for Go Leadership App
const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Colors for console output
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
  reset: '\x1b[0m'
};

function colorLog(color, message) {
  console.log(colors[color] + message + colors.reset);
}

function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer.trim());
    });
  });
}

async function createDirectories() {
  const directories = ['public', 'templates'];
  
  for (const dir of directories) {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
      colorLog('green', `‚úÖ Created directory: ${dir}`);
    } else {
      colorLog('yellow', `‚ö™ Directory already exists: ${dir}`);
    }
  }
}

async function createEnvFile() {
  colorLog('cyan', '\nüìù Setting up environment variables...');
  
  if (fs.existsSync('.env')) {
    const overwrite = await askQuestion('‚ùì .env file already exists. Overwrite? (y/N): ');
    if (overwrite.toLowerCase() !== 'y') {
      colorLog('yellow', '‚ö™ Skipping .env file creation');
      return;
    }
  }
  
  colorLog('blue', '\nPlease provide the following information:');
  
  // PostgreSQL Database URL
  colorLog('magenta', '\nüêò PostgreSQL Configuration:');
  const databaseUrl = await askQuestion('üìä DATABASE_URL (PostgreSQL connection string): ');
  if (!databaseUrl) {
    colorLog('yellow', '‚ö†Ô∏è  No DATABASE_URL provided. Using Replit default.');
    colorLog('blue', 'üí° Replit will automatically provide DATABASE_URL environment variable');
  }
  
  const openaiKey = await askQuestion('ü§ñ OpenAI API Key (required): ');
  if (!openaiKey) {
    colorLog('red', '‚ùå OpenAI API Key is required for the app to function');
    process.exit(1);
  }
  
  const emailUser = await askQuestion('üìß Email address (Gmail recommended): ');
  if (!emailUser) {
    colorLog('red', '‚ùå Email address is required');
    process.exit(1);
  }
  
  const emailPassword = await askQuestion('üîê Email password/app password: ');
  if (!emailPassword) {
    colorLog('red', '‚ùå Email password is required');
    process.exit(1);
  }
  
  const port = await askQuestion('üåê Port (default 5000): ') || '5000';
  const adminPassword = await askQuestion('üîí Admin dashboard password (default: admin123): ') || 'admin123';
  
  const envContent = `# Go Leadership App Environment Variables (PostgreSQL)
# Generated by setup script on ${new Date().toISOString()}

# PostgreSQL Database Configuration
${databaseUrl ? `DATABASE_URL=${databaseUrl}` : '# DATABASE_URL=postgresql://username:password@localhost:5432/database_name'}
${!databaseUrl ? '# Note: Replit provides DATABASE_URL automatically' : ''}

# OpenAI API Configuration
OPENAI_API_KEY=${openaiKey}

# Email Configuration
EMAIL_USER=${emailUser}
EMAIL_PASSWORD=${emailPassword}

# Server Configuration
PORT=${port}

# Admin Configuration
ADMIN_PASSWORD=${adminPassword}

# Environment
NODE_ENV=development

# Optional: Custom SMTP (leave blank to use Gmail)
# SMTP_HOST=smtp.your-provider.com
# SMTP_PORT=587
`;
  
  fs.writeFileSync('.env', envContent);
  colorLog('green', '‚úÖ .env file created successfully');
}colorLog('blue', '\nPlease provide the following information:');
  
  const openaiKey = await askQuestion('ü§ñ OpenAI API Key (required): ');
  if (!openaiKey) {
    colorLog('red', '‚ùå OpenAI API Key is required for the app to function');
    process.exit(1);
  }
  
  const emailUser = await askQuestion('üìß Email address (Gmail recommended): ');
  if (!emailUser) {
    colorLog('red', '‚ùå Email address is required');
    process.exit(1);
  }
  
  const emailPassword = await askQuestion('üîê Email password/app password: ');
  if (!emailPassword) {
    colorLog('red', '‚ùå Email password is required');
    process.exit(1);
  }
  
  const port = await askQuestion('üåê Port (default 5000): ') || '5000';
  const adminPassword = await askQuestion('üîí Admin dashboard password (default: admin123): ') || 'admin123';
  
  const envContent = `# Go Leadership App Environment Variables
# Generated by setup script on ${new Date().toISOString()}

# OpenAI API Configuration
OPENAI_API_KEY=${openaiKey}

# Email Configuration
EMAIL_USER=${emailUser}
EMAIL_PASSWORD=${emailPassword}

# Server Configuration
PORT=${port}

# Admin Configuration
ADMIN_PASSWORD=${adminPassword}

# Environment
NODE_ENV=development

# Optional: Custom SMTP (leave blank to use Gmail)
# SMTP_HOST=smtp.your-provider.com
# SMTP_PORT=587
`;
  
  fs.writeFileSync('.env', envContent);
  colorLog('green', '‚úÖ .env file created successfully');
}

async function validateSetup() {
  colorLog('cyan', '\nüîç Validating setup...');
  
  // Check required files
  const requiredFiles = [
    'package.json',
    'server.js',
    'database.js',
    'aiService.js',
    'emailService.js',
    'scheduler.js',
    '.env'
  ];
  
  let missingFiles = [];
  
  for (const file of requiredFiles) {
    if (fs.existsSync(file)) {
      colorLog('green', `‚úÖ ${file}`);
    } else {
      colorLog('red', `‚ùå ${file}`);
      missingFiles.push(file);
    }
  }
  
  if (missingFiles.length > 0) {
    colorLog('red', `\n‚ùå Missing required files: ${missingFiles.join(', ')}`);
    return false;
  }
  
  // Check frontend files
  const frontendFiles = [
    'public/index.html',
    'public/style.css',
    'public/script.js',
    'public/admin.html',
    'public/success.html'
  ];
  
  for (const file of frontendFiles) {
    if (fs.existsSync(file)) {
      colorLog('green', `‚úÖ ${file}`);
    } else {
      colorLog('yellow', `‚ö†Ô∏è  ${file} - Will be created by artifacts`);
    }
  }
  
  // Check templates
  const templateFiles = [
    'templates/welcome.html',
    'templates/weekly.html'
  ];
  
  for (const file of templateFiles) {
    if (fs.existsSync(file)) {
      colorLog('green', `‚úÖ ${file}`);
    } else {
      colorLog('yellow', `‚ö†Ô∏è  ${file} - Will be created by artifacts`);
    }
  }
  
  return true;
}

async function installDependencies() {
  colorLog('cyan', '\nüì¶ Checking dependencies...');
  
  if (!fs.existsSync('node_modules')) {
    const install = await askQuestion('‚ùì Install dependencies with npm? (Y/n): ');
    if (install.toLowerCase() !== 'n') {
      colorLog('blue', 'üì• Installing dependencies...');
      
      const { spawn } = require('child_process');
      
      return new Promise((resolve, reject) => {
        const npm = spawn('npm', ['install'], { stdio: 'inherit' });
        
        npm.on('close', (code) => {
          if (code === 0) {
            colorLog('green', '‚úÖ Dependencies installed successfully');
            resolve();
          } else {
            colorLog('red', '‚ùå Failed to install dependencies');
            reject(new Error('npm install failed'));
          }
        });
      });
    }
  } else {
    colorLog('green', '‚úÖ Dependencies already installed');
  }
}

async function testConfiguration() {
  colorLog('cyan', '\nüß™ Testing configuration...');
  
  // Load environment variables
  require('dotenv').config();
  
  // Test OpenAI API Key
  if (process.env.OPENAI_API_KEY) {
    colorLog('green', '‚úÖ OpenAI API Key configured');
  } else {
    colorLog('red', '‚ùå OpenAI API Key missing');
    return false;
  }
  
  // Test email configuration
  if (process.env.EMAIL_USER && process.env.EMAIL_PASSWORD) {
    colorLog('green', '‚úÖ Email configuration found');
  } else {
    colorLog('red', '‚ùå Email configuration incomplete');
    return false;
  }
  
  // Test PostgreSQL database connection
  if (process.env.DATABASE_URL) {
    colorLog('green', '‚úÖ DATABASE_URL configured');
    try {
      const { testConnection } = require('./database');
      const connected = await testConnection();
      if (connected) {
        colorLog('green', '‚úÖ PostgreSQL connection successful');
      } else {
        colorLog('red', '‚ùå PostgreSQL connection failed');
        return false;
      }
    } catch (error) {
      colorLog('red', `‚ùå PostgreSQL connection test failed: ${error.message}`);
      return false;
    }
  } else {
    colorLog('yellow', '‚ö†Ô∏è  DATABASE_URL not set - this is normal on Replit');
    colorLog('blue', 'üí° Replit will provide DATABASE_URL automatically when deployed');
  }
  
  // Test database initialization
  try {
    const { initDatabase } = require('./database');
    await initDatabase();
    colorLog('green', '‚úÖ Database initialized successfully');
  } catch (error) {
    colorLog('red', `‚ùå Database initialization failed: ${error.message}`);
    colorLog('yellow', 'üí° Try running: npm run migrate up');
    return false;
  }
  
  return true;
}

async function runMigrations() {
  colorLog('cyan', '\nüóÉÔ∏è  Running database migrations...');
  
  try {
    const { migrateUp } = require('./migrations/migrate');
    await migrateUp();
    colorLog('green', '‚úÖ Database migrations completed');
    return true;
  } catch (error) {
    colorLog('red', `‚ùå Migration failed: ${error.message}`);
    return false;
  }
}

async function showCompletionMessage() {
  colorLog('green', '\nüéâ PostgreSQL Setup completed successfully!');
  colorLog('cyan', '\nüìã Next steps:');
  console.log('');
  console.log('1. Run database migrations:');
  colorLog('blue', '   npm run migrate up');
  console.log('');
  console.log('2. (Optional) Create sample data:');
  colorLog('blue', '   npm run migrate sample');
  console.log('');
  console.log('3. Start the application:');
  colorLog('blue', '   npm start');
  console.log('');
  console.log('4. Or use the startup script:');
  colorLog('blue', '   ./start.sh');
  console.log('');
  console.log('5. Visit your application:');
  colorLog('blue', `   http://localhost:${process.env.PORT || 5000}`);
  console.log('');
  console.log('6. Access admin dashboard:');
  colorLog('blue', `   http://localhost:${process.env.PORT || 5000}/admin`);
  console.log('');
  console.log('7. Run tests:');
  colorLog('blue', '   npm test');
  colorLog('blue', '   npm run test -- --all');
  console.log('');
  console.log('8. Check migration status:');
  colorLog('blue', '   npm run migrate status');
  console.log('');
  colorLog('magenta', 'üêò PostgreSQL Features:');
  colorLog('magenta', '   ‚Ä¢ Scalable database with connection pooling');
  colorLog('magenta', '   ‚Ä¢ ACID compliance and data integrity');
  colorLog('magenta', '   ‚Ä¢ Advanced indexing for better performance');
  colorLog('magenta', '   ‚Ä¢ Automatic migrations and schema management');
  console.log('');
  colorLog('magenta', 'üìö Documentation: Check README.md for more information');
  colorLog('magenta', 'üêõ Issues: Report bugs on GitHub');
  colorLog('magenta', 'üí¨ Support: Email support@go-leadership.app');
}

async function generateStartupScript() {
  const startScript = `#!/bin/bash
# Go Leadership App Startup Script
# Generated by setup script

echo "üöÄ Starting Go Leadership App..."

# Check if .env exists
if [ ! -f .env ]; then
    echo "‚ùå .env file not found. Run setup.js first."
    exit 1
fi

# Check if node_modules exists
if [ ! -d node_modules ]; then
    echo "üì¶ Installing dependencies..."
    npm install
fi

# Start the application
echo "üéØ Go Leadership App starting on port \${PORT:-5000}"
npm start
`;

  fs.writeFileSync('start.sh', startScript);
  
  // Make executable on Unix systems
  try {
    fs.chmodSync('start.sh', '755');
    colorLog('green', '‚úÖ Created start.sh script');
  } catch (error) {
    colorLog('yellow', '‚ö†Ô∏è  Created start.sh (chmod failed - you may need to make it executable manually)');
  }
}

async function showCompletionMessage() {
  colorLog('green', '\nüéâ Setup completed successfully!');
  colorLog('cyan', '\nüìã Next steps:');
  console.log('');
  console.log('1. Start the application:');
  colorLog('blue', '   npm start');
  console.log('');
  console.log('2. Or use the startup script:');
  colorLog('blue', '   ./start.sh');
  console.log('');
  console.log('3. Visit your application:');
  colorLog('blue', `   http://localhost:${process.env.PORT || 5000}`);
  console.log('');
  console.log('4. Access admin dashboard:');
  colorLog('blue', `   http://localhost:${process.env.PORT || 5000}/admin`);
  console.log('');
  console.log('5. Run tests:');
  colorLog('blue', '   npm test');
  colorLog('blue', '   npm run test -- --all');
  console.log('');
  colorLog('magenta', 'üìö Documentation: Check README.md for more information');
  colorLog('magenta', 'üêõ Issues: Report bugs on GitHub');
  colorLog('magenta', 'üí¨ Support: Email support@go-leadership.app');
}

async function main() {
  console.clear();
  colorLog('cyan', 'üöÄ Go Leadership App Setup (PostgreSQL)');
  colorLog('cyan', '=======================================\n');
  
  try {
    // Welcome message
    colorLog('blue', 'Welcome! This script will help you set up your Go Leadership App with PostgreSQL.');
    colorLog('yellow', 'Make sure you have Node.js 18+ and npm installed.\n');
    colorLog('magenta', 'üêò This version uses PostgreSQL 15 - perfect for Replit deployment!\n');
    
    const proceed = await askQuestion('‚ùì Continue with setup? (Y/n): ');
    if (proceed.toLowerCase() === 'n') {
      colorLog('yellow', 'üëã Setup cancelled');
      process.exit(0);
    }
    
    // Create directories
    colorLog('cyan', '\nüìÅ Creating directories...');
    await createDirectories();
    
    // Create migrations directory
    if (!fs.existsSync('migrations')) {
      fs.mkdirSync('migrations', { recursive: true });
      colorLog('green', '‚úÖ Created directory: migrations');
    } else {
      colorLog('yellow', '‚ö™ Directory already exists: migrations');
    }
    
    // Create .env file
    await createEnvFile();
    
    // Install dependencies
    await installDependencies();
    
    // Validate setup
    const setupValid = await validateSetup();
    if (!setupValid) {
      colorLog('red', '\n‚ùå Setup validation failed');
      process.exit(1);
    }
    
    // Run database migrations
    const migrationsRun = await runMigrations();
    if (!migrationsRun) {
      colorLog('yellow', '\n‚ö†Ô∏è  Migration failed - you may need to run them manually later');
    }
    
    // Test configuration
    const configValid = await testConfiguration();
    if (!configValid) {
      colorLog('red', '\n‚ùå Configuration test failed');
      colorLog('yellow', 'üí° Please check your .env file and DATABASE_URL');
      colorLog('yellow', 'üí° On Replit, DATABASE_URL is provided automatically');
      process.exit(1);
    }
    
    // Generate startup script
    await generateStartupScript();
    
    // Show completion message
    await showCompletionMessage();
    
  } catch (error) {
    colorLog('red', `\n‚ùå Setup failed: ${error.message}`);
    process.exit(1);
  } finally {
    rl.close();
  }
}

// Show help
function showHelp() {
  console.log(`
üöÄ Go Leadership App Setup Script (PostgreSQL)

This script will help you set up your Go Leadership App with PostgreSQL by:
- Creating necessary directories
- Setting up environment variables (including DATABASE_URL)
- Installing dependencies
- Running database migrations
- Testing PostgreSQL configuration
- Creating startup scripts

Usage:
  node setup.js        # Run interactive setup
  node setup.js --help # Show this help

Requirements:
- Node.js 18+
- npm
- PostgreSQL 15 (provided by Replit)
- OpenAI API key
- Email account (Gmail recommended)

For Replit deployment:
- DATABASE_URL is automatically provided
- PostgreSQL 15 is pre-configured
- No additional database setup required

For more information, visit: https://github.com/yourusername/go-leadership-app
`);
}

// Run setup if called directly
if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args.includes('--help') || args.includes('-h')) {
    showHelp();
    process.exit(0);
  }
  
  main().catch(error => {
    colorLog('red', `Setup error: ${error.message}`);
    process.exit(1);
  });
}

module.exports = { main };